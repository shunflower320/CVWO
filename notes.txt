Execution plan:

Each search involves looking up multiple tables
Consider prioritising commonly accessed data (do sth to their keys)

CRUD: create, read, update, delete

Styling: use Vanilla framework

Actual tasks:
1. come up with task manager that allows for CRUD of tasks
2. tasks are to be tagged, which are used for searching

Use cases:

**********
* Task 1 *
**********
- user keys in @name and @description of task in /tasks/new
- user saves task (creation)
- page redirects to list of names of tasks (/tasks), each redirecting to a page for that task
	- <%= link_to 'Tasks', controller: 'tasks' %>
	- <% @tasks.each do |task| %>
	    <tr>
	      <td><%= task.title %></td>
	      <td><%= link_to 'Show', task_path(task) %></td>
	    </tr>
	  <% end %>
- if user selects task:
	- shows full description #read
	- allows for editing (directly display description in text box) #update
	- includes @delete options #delete
	if user selects delete:
		- removes task from list of tasks in database
			- thus name of task no longer appears in /tasks

**********
* Task 2 *
**********
- include a "commonly accessed" list of tasks
- user types into searchbar name of task, look up alphabetically
